plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

// Add these lines to load key.properties
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystorePropertiesFile.withReader('UTF-8') { reader ->
        keystoreProperties.load(reader)
    }
}


// *** ADD DEBUG LOGGING HERE ***
println "DEBUG: Keystore Path Property: ${project.hasProperty('keyStorePath') ? project.property('keyStorePath') : 'Not Found'}"
println "DEBUG: Keystore Password Property: ${project.hasProperty('keyStorePassword') ? 'Set (masked)' : 'Not Found'}" // Mask password
println "DEBUG: Key Alias Property: ${project.hasProperty('keyAlias') ? project.property('keyAlias') : 'Not Found'}"
println "DEBUG: Key Password Property: ${project.hasProperty('keyPassword') ? 'Set (masked)' : 'Not Found'}" // Mask password

// Print the values assigned to the variables used by signingConfigs
println "DEBUG: Variable keystorePath = ${keystorePath}"
// WARNING: Printing password - remove/mask after debugging
println "DEBUG: Variable keystorePassword = ${keystorePassword}"
println "DEBUG: Variable keystoreAlias = ${keystoreAlias}"
// WARNING: Printing password - remove/mask after debugging
println "DEBUG: Variable keyPassword = ${keyPassword}"
// *** END DEBUG LOGGING ***

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}

android {
    namespace "de.thuenen.terrestrial_forest_monitor"

    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }

    //compileOptions {
    //    sourceCompatibility = JavaVersion.VERSION_1_8
    //    targetCompatibility = JavaVersion.VERSION_1_8
    //}

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "de.thuenen.terrestrial_forest_monitor"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName
    }

    signingConfigs {
        release {
            try {
                storeFile file("../keystore.jks")
                storePassword System.getenv("storePassword")
                keyAlias System.getenv("keyAlias")
                keyPassword System.getenv("keyPassword")
            } catch (Exception ignored) {
                storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
                storePassword keystoreProperties['storePassword']
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
            }
            storeFile = file("${project.rootDir}/app/keystore.jks")
            storePassword = keystorePassword
            keyAlias = keystoreAlias
            keyPassword = keyPassword
            storeType = "jks"
            println "DEBUG: Assigned storePassword, keyAlias, keyPassword, storeType"
        }
    }

    buildTypes {
        release {
             println "DEBUG: Inside buildTypes.release"
            // Check file existence
            if (!signingConfigs.release.storeFile?.exists()) {
                 logger.warn("Keystore file specified but not found at path: ${signingConfigs.release.storeFile?.absolutePath}")
            }
            // Assign the release signing config.
            signingConfig signingConfigs.release
            println "DEBUG: Assigned signingConfig = signingConfigs.release"
            // ...
        }
    }
}

flutter {
    source = "../.."
}
